package de.i3mainz.flexgeo.portal.liferay.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.i3mainz.flexgeo.portal.liferay.services.model.OGCServiceLayer;
import de.i3mainz.flexgeo.portal.liferay.services.model.OGCServiceLayerModel;
import de.i3mainz.flexgeo.portal.liferay.services.model.OGCServiceLayerSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the OGCServiceLayer service. Represents a row in the &quot;olmaps_OGCServiceLayer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.i3mainz.flexgeo.portal.liferay.services.model.OGCServiceLayerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OGCServiceLayerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OGCServiceLayerImpl
 * @see de.i3mainz.flexgeo.portal.liferay.services.model.OGCServiceLayer
 * @see de.i3mainz.flexgeo.portal.liferay.services.model.OGCServiceLayerModel
 * @generated
 */
@JSON(strict = true)
public class OGCServiceLayerModelImpl extends BaseModelImpl<OGCServiceLayer>
    implements OGCServiceLayerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a o g c service layer model instance should use the {@link de.i3mainz.flexgeo.portal.liferay.services.model.OGCServiceLayer} interface instead.
     */
    public static final String TABLE_NAME = "olmaps_OGCServiceLayer";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "layerId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "layerName", Types.VARCHAR },
            { "layerServiceId", Types.BIGINT },
            { "layerOptions", Types.VARCHAR },
            { "layerDisplayOptions", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table olmaps_OGCServiceLayer (uuid_ VARCHAR(75) null,layerId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,layerName VARCHAR(75) null,layerServiceId LONG,layerOptions VARCHAR(75) null,layerDisplayOptions VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table olmaps_OGCServiceLayer";
    public static final String ORDER_BY_JPQL = " ORDER BY ogcServiceLayer.layerId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY olmaps_OGCServiceLayer.layerId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.i3mainz.flexgeo.portal.liferay.services.model.OGCServiceLayer"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.i3mainz.flexgeo.portal.liferay.services.model.OGCServiceLayer"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.de.i3mainz.flexgeo.portal.liferay.services.model.OGCServiceLayer"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long LAYERNAME_COLUMN_BITMASK = 4L;
    public static long UUID_COLUMN_BITMASK = 8L;
    public static long LAYERID_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.i3mainz.flexgeo.portal.liferay.services.model.OGCServiceLayer"));
    private static ClassLoader _classLoader = OGCServiceLayer.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            OGCServiceLayer.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _layerId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private Date _modifiedDate;
    private String _layerName;
    private String _originalLayerName;
    private long _layerServiceId;
    private String _layerOptions;
    private String _layerDisplayOptions;
    private long _columnBitmask;
    private OGCServiceLayer _escapedModel;

    public OGCServiceLayerModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static OGCServiceLayer toModel(OGCServiceLayerSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        OGCServiceLayer model = new OGCServiceLayerImpl();

        model.setUuid(soapModel.getUuid());
        model.setLayerId(soapModel.getLayerId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setLayerName(soapModel.getLayerName());
        model.setLayerServiceId(soapModel.getLayerServiceId());
        model.setLayerOptions(soapModel.getLayerOptions());
        model.setLayerDisplayOptions(soapModel.getLayerDisplayOptions());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<OGCServiceLayer> toModels(
        OGCServiceLayerSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<OGCServiceLayer> models = new ArrayList<OGCServiceLayer>(soapModels.length);

        for (OGCServiceLayerSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _layerId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setLayerId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _layerId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return OGCServiceLayer.class;
    }

    @Override
    public String getModelClassName() {
        return OGCServiceLayer.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("layerId", getLayerId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("layerName", getLayerName());
        attributes.put("layerServiceId", getLayerServiceId());
        attributes.put("layerOptions", getLayerOptions());
        attributes.put("layerDisplayOptions", getLayerDisplayOptions());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long layerId = (Long) attributes.get("layerId");

        if (layerId != null) {
            setLayerId(layerId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String layerName = (String) attributes.get("layerName");

        if (layerName != null) {
            setLayerName(layerName);
        }

        Long layerServiceId = (Long) attributes.get("layerServiceId");

        if (layerServiceId != null) {
            setLayerServiceId(layerServiceId);
        }

        String layerOptions = (String) attributes.get("layerOptions");

        if (layerOptions != null) {
            setLayerOptions(layerOptions);
        }

        String layerDisplayOptions = (String) attributes.get(
                "layerDisplayOptions");

        if (layerDisplayOptions != null) {
            setLayerDisplayOptions(layerDisplayOptions);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    @Override
    public long getLayerId() {
        return _layerId;
    }

    @Override
    public void setLayerId(long layerId) {
        _layerId = layerId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getLayerName() {
        if (_layerName == null) {
            return StringPool.BLANK;
        } else {
            return _layerName;
        }
    }

    @Override
    public void setLayerName(String layerName) {
        _columnBitmask |= LAYERNAME_COLUMN_BITMASK;

        if (_originalLayerName == null) {
            _originalLayerName = _layerName;
        }

        _layerName = layerName;
    }

    public String getOriginalLayerName() {
        return GetterUtil.getString(_originalLayerName);
    }

    @JSON
    @Override
    public long getLayerServiceId() {
        return _layerServiceId;
    }

    @Override
    public void setLayerServiceId(long layerServiceId) {
        _layerServiceId = layerServiceId;
    }

    @JSON
    @Override
    public String getLayerOptions() {
        if (_layerOptions == null) {
            return StringPool.BLANK;
        } else {
            return _layerOptions;
        }
    }

    @Override
    public void setLayerOptions(String layerOptions) {
        _layerOptions = layerOptions;
    }

    @JSON
    @Override
    public String getLayerDisplayOptions() {
        if (_layerDisplayOptions == null) {
            return StringPool.BLANK;
        } else {
            return _layerDisplayOptions;
        }
    }

    @Override
    public void setLayerDisplayOptions(String layerDisplayOptions) {
        _layerDisplayOptions = layerDisplayOptions;
    }

    @Override
    public StagedModelType getStagedModelType() {
        return new StagedModelType(PortalUtil.getClassNameId(
                OGCServiceLayer.class.getName()));
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            OGCServiceLayer.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public OGCServiceLayer toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (OGCServiceLayer) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        OGCServiceLayerImpl ogcServiceLayerImpl = new OGCServiceLayerImpl();

        ogcServiceLayerImpl.setUuid(getUuid());
        ogcServiceLayerImpl.setLayerId(getLayerId());
        ogcServiceLayerImpl.setGroupId(getGroupId());
        ogcServiceLayerImpl.setCompanyId(getCompanyId());
        ogcServiceLayerImpl.setUserId(getUserId());
        ogcServiceLayerImpl.setCreateDate(getCreateDate());
        ogcServiceLayerImpl.setModifiedDate(getModifiedDate());
        ogcServiceLayerImpl.setLayerName(getLayerName());
        ogcServiceLayerImpl.setLayerServiceId(getLayerServiceId());
        ogcServiceLayerImpl.setLayerOptions(getLayerOptions());
        ogcServiceLayerImpl.setLayerDisplayOptions(getLayerDisplayOptions());

        ogcServiceLayerImpl.resetOriginalValues();

        return ogcServiceLayerImpl;
    }

    @Override
    public int compareTo(OGCServiceLayer ogcServiceLayer) {
        long primaryKey = ogcServiceLayer.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof OGCServiceLayer)) {
            return false;
        }

        OGCServiceLayer ogcServiceLayer = (OGCServiceLayer) obj;

        long primaryKey = ogcServiceLayer.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        OGCServiceLayerModelImpl ogcServiceLayerModelImpl = this;

        ogcServiceLayerModelImpl._originalUuid = ogcServiceLayerModelImpl._uuid;

        ogcServiceLayerModelImpl._originalGroupId = ogcServiceLayerModelImpl._groupId;

        ogcServiceLayerModelImpl._setOriginalGroupId = false;

        ogcServiceLayerModelImpl._originalCompanyId = ogcServiceLayerModelImpl._companyId;

        ogcServiceLayerModelImpl._setOriginalCompanyId = false;

        ogcServiceLayerModelImpl._originalLayerName = ogcServiceLayerModelImpl._layerName;

        ogcServiceLayerModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<OGCServiceLayer> toCacheModel() {
        OGCServiceLayerCacheModel ogcServiceLayerCacheModel = new OGCServiceLayerCacheModel();

        ogcServiceLayerCacheModel.uuid = getUuid();

        String uuid = ogcServiceLayerCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            ogcServiceLayerCacheModel.uuid = null;
        }

        ogcServiceLayerCacheModel.layerId = getLayerId();

        ogcServiceLayerCacheModel.groupId = getGroupId();

        ogcServiceLayerCacheModel.companyId = getCompanyId();

        ogcServiceLayerCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            ogcServiceLayerCacheModel.createDate = createDate.getTime();
        } else {
            ogcServiceLayerCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            ogcServiceLayerCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            ogcServiceLayerCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        ogcServiceLayerCacheModel.layerName = getLayerName();

        String layerName = ogcServiceLayerCacheModel.layerName;

        if ((layerName != null) && (layerName.length() == 0)) {
            ogcServiceLayerCacheModel.layerName = null;
        }

        ogcServiceLayerCacheModel.layerServiceId = getLayerServiceId();

        ogcServiceLayerCacheModel.layerOptions = getLayerOptions();

        String layerOptions = ogcServiceLayerCacheModel.layerOptions;

        if ((layerOptions != null) && (layerOptions.length() == 0)) {
            ogcServiceLayerCacheModel.layerOptions = null;
        }

        ogcServiceLayerCacheModel.layerDisplayOptions = getLayerDisplayOptions();

        String layerDisplayOptions = ogcServiceLayerCacheModel.layerDisplayOptions;

        if ((layerDisplayOptions != null) &&
                (layerDisplayOptions.length() == 0)) {
            ogcServiceLayerCacheModel.layerDisplayOptions = null;
        }

        return ogcServiceLayerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(23);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", layerId=");
        sb.append(getLayerId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", layerName=");
        sb.append(getLayerName());
        sb.append(", layerServiceId=");
        sb.append(getLayerServiceId());
        sb.append(", layerOptions=");
        sb.append(getLayerOptions());
        sb.append(", layerDisplayOptions=");
        sb.append(getLayerDisplayOptions());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(37);

        sb.append("<model><model-name>");
        sb.append(
            "de.i3mainz.flexgeo.portal.liferay.services.model.OGCServiceLayer");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>layerId</column-name><column-value><![CDATA[");
        sb.append(getLayerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>layerName</column-name><column-value><![CDATA[");
        sb.append(getLayerName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>layerServiceId</column-name><column-value><![CDATA[");
        sb.append(getLayerServiceId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>layerOptions</column-name><column-value><![CDATA[");
        sb.append(getLayerOptions());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>layerDisplayOptions</column-name><column-value><![CDATA[");
        sb.append(getLayerDisplayOptions());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
