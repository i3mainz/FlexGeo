package de.i3mainz.flexgeo.portal.liferay.services.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.CompanyPersistence;
import com.liferay.portal.service.persistence.GroupPersistence;
import com.liferay.portal.service.persistence.OrganizationPersistence;
import com.liferay.portal.service.persistence.PortletPreferencesPersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import de.i3mainz.flexgeo.portal.liferay.services.model.OGCService;
import de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceLocalService;
import de.i3mainz.flexgeo.portal.liferay.services.service.persistence.OGCServiceLayerPersistence;
import de.i3mainz.flexgeo.portal.liferay.services.service.persistence.OGCServicePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the o g c service local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link de.i3mainz.flexgeo.portal.liferay.services.service.impl.OGCServiceLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see de.i3mainz.flexgeo.portal.liferay.services.service.impl.OGCServiceLocalServiceImpl
 * @see de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceLocalServiceUtil
 * @generated
 */
public abstract class OGCServiceLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements OGCServiceLocalService,
        IdentifiableBean {
    @BeanReference(type = de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceLocalService.class)
    protected de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceLocalService ogcServiceLocalService;
    @BeanReference(type = de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceService.class)
    protected de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceService ogcServiceService;
    @BeanReference(type = OGCServicePersistence.class)
    protected OGCServicePersistence ogcServicePersistence;
    @BeanReference(type = de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceLayerLocalService.class)
    protected de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceLayerLocalService ogcServiceLayerLocalService;
    @BeanReference(type = de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceLayerService.class)
    protected de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceLayerService ogcServiceLayerService;
    @BeanReference(type = OGCServiceLayerPersistence.class)
    protected OGCServiceLayerPersistence ogcServiceLayerPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.CompanyLocalService.class)
    protected com.liferay.portal.service.CompanyLocalService companyLocalService;
    @BeanReference(type = com.liferay.portal.service.CompanyService.class)
    protected com.liferay.portal.service.CompanyService companyService;
    @BeanReference(type = CompanyPersistence.class)
    protected CompanyPersistence companyPersistence;
    @BeanReference(type = com.liferay.portal.service.GroupLocalService.class)
    protected com.liferay.portal.service.GroupLocalService groupLocalService;
    @BeanReference(type = com.liferay.portal.service.GroupService.class)
    protected com.liferay.portal.service.GroupService groupService;
    @BeanReference(type = GroupPersistence.class)
    protected GroupPersistence groupPersistence;
    @BeanReference(type = com.liferay.portal.service.OrganizationLocalService.class)
    protected com.liferay.portal.service.OrganizationLocalService organizationLocalService;
    @BeanReference(type = com.liferay.portal.service.OrganizationService.class)
    protected com.liferay.portal.service.OrganizationService organizationService;
    @BeanReference(type = OrganizationPersistence.class)
    protected OrganizationPersistence organizationPersistence;
    @BeanReference(type = com.liferay.portal.service.PortletPreferencesLocalService.class)
    protected com.liferay.portal.service.PortletPreferencesLocalService portletPreferencesLocalService;
    @BeanReference(type = com.liferay.portal.service.PortletPreferencesService.class)
    protected com.liferay.portal.service.PortletPreferencesService portletPreferencesService;
    @BeanReference(type = PortletPreferencesPersistence.class)
    protected PortletPreferencesPersistence portletPreferencesPersistence;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private OGCServiceLocalServiceClpInvoker _clpInvoker = new OGCServiceLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceLocalServiceUtil} to access the o g c service local service.
     */

    /**
     * Adds the o g c service to the database. Also notifies the appropriate model listeners.
     *
     * @param ogcService the o g c service
     * @return the o g c service that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public OGCService addOGCService(OGCService ogcService)
        throws SystemException {
        ogcService.setNew(true);

        return ogcServicePersistence.update(ogcService);
    }

    /**
     * Creates a new o g c service with the primary key. Does not add the o g c service to the database.
     *
     * @param serviceId the primary key for the new o g c service
     * @return the new o g c service
     */
    @Override
    public OGCService createOGCService(long serviceId) {
        return ogcServicePersistence.create(serviceId);
    }

    /**
     * Deletes the o g c service with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param serviceId the primary key of the o g c service
     * @return the o g c service that was removed
     * @throws PortalException if a o g c service with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public OGCService deleteOGCService(long serviceId)
        throws PortalException, SystemException {
        return ogcServicePersistence.remove(serviceId);
    }

    /**
     * Deletes the o g c service from the database. Also notifies the appropriate model listeners.
     *
     * @param ogcService the o g c service
     * @return the o g c service that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public OGCService deleteOGCService(OGCService ogcService)
        throws SystemException {
        return ogcServicePersistence.remove(ogcService);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(OGCService.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return ogcServicePersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.i3mainz.flexgeo.portal.liferay.services.model.impl.OGCServiceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return ogcServicePersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.i3mainz.flexgeo.portal.liferay.services.model.impl.OGCServiceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return ogcServicePersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return ogcServicePersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return ogcServicePersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public OGCService fetchOGCService(long serviceId) throws SystemException {
        return ogcServicePersistence.fetchByPrimaryKey(serviceId);
    }

    /**
     * Returns the o g c service with the matching UUID and company.
     *
     * @param uuid the o g c service's UUID
     * @param  companyId the primary key of the company
     * @return the matching o g c service, or <code>null</code> if a matching o g c service could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public OGCService fetchOGCServiceByUuidAndCompanyId(String uuid,
        long companyId) throws SystemException {
        return ogcServicePersistence.fetchByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the o g c service matching the UUID and group.
     *
     * @param uuid the o g c service's UUID
     * @param groupId the primary key of the group
     * @return the matching o g c service, or <code>null</code> if a matching o g c service could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public OGCService fetchOGCServiceByUuidAndGroupId(String uuid, long groupId)
        throws SystemException {
        return ogcServicePersistence.fetchByUUID_G(uuid, groupId);
    }

    /**
     * Returns the o g c service with the primary key.
     *
     * @param serviceId the primary key of the o g c service
     * @return the o g c service
     * @throws PortalException if a o g c service with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    public OGCService getOGCService(long serviceId)
        throws PortalException, SystemException {
        return ogcServicePersistence.findByPrimaryKey(serviceId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return ogcServicePersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns the o g c service with the matching UUID and company.
     *
     * @param uuid the o g c service's UUID
     * @param  companyId the primary key of the company
     * @return the matching o g c service
     * @throws PortalException if a matching o g c service could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public OGCService getOGCServiceByUuidAndCompanyId(String uuid,
        long companyId) throws PortalException, SystemException {
        return ogcServicePersistence.findByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the o g c service matching the UUID and group.
     *
     * @param uuid the o g c service's UUID
     * @param groupId the primary key of the group
     * @return the matching o g c service
     * @throws PortalException if a matching o g c service could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public OGCService getOGCServiceByUuidAndGroupId(String uuid, long groupId)
        throws PortalException, SystemException {
        return ogcServicePersistence.findByUUID_G(uuid, groupId);
    }

    /**
     * Returns a range of all the o g c services.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.i3mainz.flexgeo.portal.liferay.services.model.impl.OGCServiceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of o g c services
     * @param end the upper bound of the range of o g c services (not inclusive)
     * @return the range of o g c services
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<OGCService> getOGCServices(int start, int end)
        throws SystemException {
        return ogcServicePersistence.findAll(start, end);
    }

    /**
     * Returns the number of o g c services.
     *
     * @return the number of o g c services
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getOGCServicesCount() throws SystemException {
        return ogcServicePersistence.countAll();
    }

    /**
     * Updates the o g c service in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param ogcService the o g c service
     * @return the o g c service that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public OGCService updateOGCService(OGCService ogcService)
        throws SystemException {
        return ogcServicePersistence.update(ogcService);
    }

    /**
     * Returns the o g c service local service.
     *
     * @return the o g c service local service
     */
    public de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceLocalService getOGCServiceLocalService() {
        return ogcServiceLocalService;
    }

    /**
     * Sets the o g c service local service.
     *
     * @param ogcServiceLocalService the o g c service local service
     */
    public void setOGCServiceLocalService(
        de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceLocalService ogcServiceLocalService) {
        this.ogcServiceLocalService = ogcServiceLocalService;
    }

    /**
     * Returns the o g c service remote service.
     *
     * @return the o g c service remote service
     */
    public de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceService getOGCServiceService() {
        return ogcServiceService;
    }

    /**
     * Sets the o g c service remote service.
     *
     * @param ogcServiceService the o g c service remote service
     */
    public void setOGCServiceService(
        de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceService ogcServiceService) {
        this.ogcServiceService = ogcServiceService;
    }

    /**
     * Returns the o g c service persistence.
     *
     * @return the o g c service persistence
     */
    public OGCServicePersistence getOGCServicePersistence() {
        return ogcServicePersistence;
    }

    /**
     * Sets the o g c service persistence.
     *
     * @param ogcServicePersistence the o g c service persistence
     */
    public void setOGCServicePersistence(
        OGCServicePersistence ogcServicePersistence) {
        this.ogcServicePersistence = ogcServicePersistence;
    }

    /**
     * Returns the o g c service layer local service.
     *
     * @return the o g c service layer local service
     */
    public de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceLayerLocalService getOGCServiceLayerLocalService() {
        return ogcServiceLayerLocalService;
    }

    /**
     * Sets the o g c service layer local service.
     *
     * @param ogcServiceLayerLocalService the o g c service layer local service
     */
    public void setOGCServiceLayerLocalService(
        de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceLayerLocalService ogcServiceLayerLocalService) {
        this.ogcServiceLayerLocalService = ogcServiceLayerLocalService;
    }

    /**
     * Returns the o g c service layer remote service.
     *
     * @return the o g c service layer remote service
     */
    public de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceLayerService getOGCServiceLayerService() {
        return ogcServiceLayerService;
    }

    /**
     * Sets the o g c service layer remote service.
     *
     * @param ogcServiceLayerService the o g c service layer remote service
     */
    public void setOGCServiceLayerService(
        de.i3mainz.flexgeo.portal.liferay.services.service.OGCServiceLayerService ogcServiceLayerService) {
        this.ogcServiceLayerService = ogcServiceLayerService;
    }

    /**
     * Returns the o g c service layer persistence.
     *
     * @return the o g c service layer persistence
     */
    public OGCServiceLayerPersistence getOGCServiceLayerPersistence() {
        return ogcServiceLayerPersistence;
    }

    /**
     * Sets the o g c service layer persistence.
     *
     * @param ogcServiceLayerPersistence the o g c service layer persistence
     */
    public void setOGCServiceLayerPersistence(
        OGCServiceLayerPersistence ogcServiceLayerPersistence) {
        this.ogcServiceLayerPersistence = ogcServiceLayerPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the company local service.
     *
     * @return the company local service
     */
    public com.liferay.portal.service.CompanyLocalService getCompanyLocalService() {
        return companyLocalService;
    }

    /**
     * Sets the company local service.
     *
     * @param companyLocalService the company local service
     */
    public void setCompanyLocalService(
        com.liferay.portal.service.CompanyLocalService companyLocalService) {
        this.companyLocalService = companyLocalService;
    }

    /**
     * Returns the company remote service.
     *
     * @return the company remote service
     */
    public com.liferay.portal.service.CompanyService getCompanyService() {
        return companyService;
    }

    /**
     * Sets the company remote service.
     *
     * @param companyService the company remote service
     */
    public void setCompanyService(
        com.liferay.portal.service.CompanyService companyService) {
        this.companyService = companyService;
    }

    /**
     * Returns the company persistence.
     *
     * @return the company persistence
     */
    public CompanyPersistence getCompanyPersistence() {
        return companyPersistence;
    }

    /**
     * Sets the company persistence.
     *
     * @param companyPersistence the company persistence
     */
    public void setCompanyPersistence(CompanyPersistence companyPersistence) {
        this.companyPersistence = companyPersistence;
    }

    /**
     * Returns the group local service.
     *
     * @return the group local service
     */
    public com.liferay.portal.service.GroupLocalService getGroupLocalService() {
        return groupLocalService;
    }

    /**
     * Sets the group local service.
     *
     * @param groupLocalService the group local service
     */
    public void setGroupLocalService(
        com.liferay.portal.service.GroupLocalService groupLocalService) {
        this.groupLocalService = groupLocalService;
    }

    /**
     * Returns the group remote service.
     *
     * @return the group remote service
     */
    public com.liferay.portal.service.GroupService getGroupService() {
        return groupService;
    }

    /**
     * Sets the group remote service.
     *
     * @param groupService the group remote service
     */
    public void setGroupService(
        com.liferay.portal.service.GroupService groupService) {
        this.groupService = groupService;
    }

    /**
     * Returns the group persistence.
     *
     * @return the group persistence
     */
    public GroupPersistence getGroupPersistence() {
        return groupPersistence;
    }

    /**
     * Sets the group persistence.
     *
     * @param groupPersistence the group persistence
     */
    public void setGroupPersistence(GroupPersistence groupPersistence) {
        this.groupPersistence = groupPersistence;
    }

    /**
     * Returns the organization local service.
     *
     * @return the organization local service
     */
    public com.liferay.portal.service.OrganizationLocalService getOrganizationLocalService() {
        return organizationLocalService;
    }

    /**
     * Sets the organization local service.
     *
     * @param organizationLocalService the organization local service
     */
    public void setOrganizationLocalService(
        com.liferay.portal.service.OrganizationLocalService organizationLocalService) {
        this.organizationLocalService = organizationLocalService;
    }

    /**
     * Returns the organization remote service.
     *
     * @return the organization remote service
     */
    public com.liferay.portal.service.OrganizationService getOrganizationService() {
        return organizationService;
    }

    /**
     * Sets the organization remote service.
     *
     * @param organizationService the organization remote service
     */
    public void setOrganizationService(
        com.liferay.portal.service.OrganizationService organizationService) {
        this.organizationService = organizationService;
    }

    /**
     * Returns the organization persistence.
     *
     * @return the organization persistence
     */
    public OrganizationPersistence getOrganizationPersistence() {
        return organizationPersistence;
    }

    /**
     * Sets the organization persistence.
     *
     * @param organizationPersistence the organization persistence
     */
    public void setOrganizationPersistence(
        OrganizationPersistence organizationPersistence) {
        this.organizationPersistence = organizationPersistence;
    }

    /**
     * Returns the portlet preferences local service.
     *
     * @return the portlet preferences local service
     */
    public com.liferay.portal.service.PortletPreferencesLocalService getPortletPreferencesLocalService() {
        return portletPreferencesLocalService;
    }

    /**
     * Sets the portlet preferences local service.
     *
     * @param portletPreferencesLocalService the portlet preferences local service
     */
    public void setPortletPreferencesLocalService(
        com.liferay.portal.service.PortletPreferencesLocalService portletPreferencesLocalService) {
        this.portletPreferencesLocalService = portletPreferencesLocalService;
    }

    /**
     * Returns the portlet preferences remote service.
     *
     * @return the portlet preferences remote service
     */
    public com.liferay.portal.service.PortletPreferencesService getPortletPreferencesService() {
        return portletPreferencesService;
    }

    /**
     * Sets the portlet preferences remote service.
     *
     * @param portletPreferencesService the portlet preferences remote service
     */
    public void setPortletPreferencesService(
        com.liferay.portal.service.PortletPreferencesService portletPreferencesService) {
        this.portletPreferencesService = portletPreferencesService;
    }

    /**
     * Returns the portlet preferences persistence.
     *
     * @return the portlet preferences persistence
     */
    public PortletPreferencesPersistence getPortletPreferencesPersistence() {
        return portletPreferencesPersistence;
    }

    /**
     * Sets the portlet preferences persistence.
     *
     * @param portletPreferencesPersistence the portlet preferences persistence
     */
    public void setPortletPreferencesPersistence(
        PortletPreferencesPersistence portletPreferencesPersistence) {
        this.portletPreferencesPersistence = portletPreferencesPersistence;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("de.i3mainz.flexgeo.portal.liferay.services.model.OGCService",
            ogcServiceLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "de.i3mainz.flexgeo.portal.liferay.services.model.OGCService");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return OGCService.class;
    }

    protected String getModelClassName() {
        return OGCService.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = ogcServicePersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
